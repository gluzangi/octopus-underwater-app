on:
  push:
    branches:
      - 'feature/**'
    paths:
      - 'static/**'
      - 'Dockerfile'

#  pull_request:
#    branches:
#      - main

  pull_request:
    types:
      - closed
    # branches:
    #   - main

name: aws-ecr-image-push

on:
  workflow_call:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:  ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

jobs:
  ci_on_feature:
    # name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: apps
          IMAGE_TAG: nginx
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

# REFS
#
# 1) REFACTORING : https://blog.elantha.com/refactor-github-actions-workflow-into-a-script
#
# 2) COMPOSITE WORKFLOW : https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
#
# 3) REUSABLE WORKFLOW : https://github.blog/2022-02-10-using-reusable-workflows-github-actions/
#
  ci_on_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: apps
          IMAGE_TAG: nginx-prod
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
